
Question API:
	This API uses node.js, javascript and express. It was part of my projects in a course which has helped me appreciate the thought and effort
	that goes into building APIs. However, this version uses a file based approach when storing questions which is not ideal. Later I will modify
	this API to use MongoDB to make it easier to use.

How it works:
	-  Users will be able to make GET requests to this API based on the number of questions, the category and the difficulty level in order to
	   get their desired amount of questions. Users will also be able to create, view and delete sessions based on token numbers. Each token number represents an active
 	   session that does not allow the user to see a question more than once, whether this be based on category or difficulty or both. The way in which I have coded this
	   is using the unique question id of the questions provided to ensure no repetitions. I have also used a shuffle function in order to randomize the questions array
	   from the questions directory.

	- The query parameters used are limit (number of questions desired), category, difficulty and token (for the sessions IDs)
	

Instructions (using POSTMAN) -
	To Install:- 
	- Download all the files into one folder
	- Unzip the questions folder and have the folder reside in the same directory as the server file
	- Open CMD and traverse into the server directory
	- Type in "npm install express" and "npm install uuid"
	- Type in "node server.js" to run the server
		
	Base URL - http://localhost:3000/
	1. To get random questions - provide /questions and select GET
	2. To create a session - provide /sessions and select POST
	3. To get the active sessions - provide /sessions and select GET
	4. To delete a specific session - provide /sessions + session ID you want to delete and select DELETE
	5. To get questions for a specific token and other parameters - type in /questions with the uuid as a query parameter along with limit, category and difficulty if desired.



Error cases:
	0. If the user requests 0 questions, the server will provide a default number of questions which is 10

	1. If the user has not provided an invalid token number, we return with a status of 2 and an empty results array

	2. If the user has provided no limit, we send 10 questions.

	3. If the user has provided an invalid limit (non integer), we return a status of 1 and an empty results array

	4. If the user has provided an invalid category (non integer), we return a status of 1 and an empty results array

	5. If the user has provided an invalid difficulty (non integer), we return a status of 1 and an empty results array

	6. If the user has provided a very large limit (more than 500 in our case), we return a status of 1 and an empty results array

	7. If the length of the objects we retrieved (based on the parameters) is less than the limit desired, we return a status of 1 and an empty results array

	8. If the difference between the total number of questions and the number of questions already stored in a session is less than the number of questions asked, we return a status of 1 and an empty results array

	9. If the difference between the total number of desired categories and the number of desired categories already stored in a session is less than or equal to 0, we return a status of 1 and an empty results array

	10. If the difference between the total number of desired difficulties and the number of desired difficulties already stored in a session is less than or equal to 0, we return a status of 1 and an empty results array



